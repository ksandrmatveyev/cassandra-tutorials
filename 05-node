# NODE
has a JVM, it is running a Java process, and that Java process is Cassandra
Don't recommend using a SAN (network attached storage), local storage is recommended

Node is responsible for the data that is stores. All data is in a distributed hash table.
Node can effectivly handle 1-3 terabytes

Nodetool for managing node (run on node): 
./nodetool help



This command shows information about the entire cluster, particularly the state of each node, and information about each of those nodes: IP address, data load, number of tokens, total percentage of data saved on each node, host ID, and datacenter and rack. We will discuss these in detail as the course progresses.

./nodetool status


The info command displays information about the connected node, which includes token information, host ID, protocol status, data load, node uptime, heap memory usage and capacity, datacenter and rack information, number of errors reported, and cache usage. Again, we will cover most of these later.


./nodetool info


The describecluster command shows the settings that are common across all of the nodes in the cluster and the current schema version used by each node. We have a simple one node cluster currently but will add to it soon.

./nodetool describecluster


The command setlogginglevel dynamically changes the logging level used by Cassandra without the need for a restart. You can also take a look at the ~/Desktop/node/logs/system.log afterwards to observe the changes.

./nodetool getlogginglevels

./nodetool setlogginglevel org.apache.cassandra TRACE



The value represents a decimal describing the percentage of queries being saved, starting from 0 (0%) to 1 (100%). Saved traces can then be viewed in the system_traces keyspace.

./nodetool settraceprobability 0.1


The command drain will stop writes occurring on the node and flush all data to disk. This command may typically be run before stopping the Cassandra node.

./nodetool drain


The command stopdaemon stops a node.

./nodetool stopdaemon


Restart your node by running

./cassandra


Run cassandra-stress to populate the cluster with 50,000 partitions using 1 client thread and without any warmup bye typing

cd ~/Desktop/node/tools/bin/
./cassandra-stress write n=50000 no-warmup -rate threads=1

Each line displays the statistics for the operations that occurred each second and shows number of partitions written, operations per second, latency information, and more



to commit all written data to disk

./nodetool flush


Run

./nodetool status

again, and check the new load on the node.

We will now examine the data cassandra stress wrote to our node. Execute the following CQLSH command to view the current keyspaces:

DESCRIBE KEYSPACES;

Notice the presence of "keyspace1" which cassandra-stress created.

Switch to that keyspace by executing the following:

USE keyspace1;

Run the following command to view the tables cassandrastress created in Keyspace1:

DESCRIBE TABLES;

Query the first five rows from standard1 by executing the following query:

SELECT *

FROM standard1

LIMIT 5;

The data that was written is not very meaningful, since they are all arbitrary BLOB values.









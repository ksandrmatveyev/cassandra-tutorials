# RING or CLUSTER
Sing node even if is a big server can broken
Add a lot of nodes. More Scale - more nodes!

How it works?
As example we have a data with partition 59:
we can write that data in every to any node in the cluster. Every node can act as a coordinator - very important role for each node

Each node is assigned a different range of data, called token ranges. A coordinator can take that data and hold it and send it to the proper node, the aknowledgement gets sent back to the client.

When you store a lot of data you need a lot of values (+2^63-1 -2^63)

# Token Value Distribution

Proper partitioner is going to do a nice distribution of that data in a random fashion, but it also is an even distribution

# Joining the Cluster
 - nodes join the cluster by communicating with any node
 - cassandra find these seed nodes list of possible nodes in cassandra.yaml
 - seed nodes communicate cluster topology to the joining node
 - once the new node joins the cluster,all nodes are peers

New node become and say "what config I need", thne other nodes recaluate tokens and send their data to the new node. All in online

# DRIVERS
 - choose which node would best coordinate a request
 - perquery basis: ResultSet results = sesion.execute("query");
 - TokenAwarePolicy - driver chooses node which contains the data
 - RoundRobinPolicy - driver round robins the ring
 - DCAwareRoundRobinPolicy - driver round robins the target data center

